<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CanoebyGuitar</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-22T04:05:52.114Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CanoebyGuitar</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>进制转换</title>
    <link href="http://yoursite.com/2020/06/22/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2020/06/22/进制转换/</id>
    <published>2020-06-22T04:02:07.000Z</published>
    <updated>2020-06-22T04:05:52.114Z</updated>
    
    <content type="html"><![CDATA[<p>PAT中常用的进制转化，包括string、vector和int间的按进制转换。string类型可以直接使用iostream读入:<figure class="highlight plain"><figcaption><span>>> str```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br><span class="line">```c++</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int toNumber_str(string x, int radix) &#123;</span><br><span class="line">    int a = 0;</span><br><span class="line">    for (int i = 0; i &lt; x.size(); i++) &#123;</span><br><span class="line">        a = a * radix + (x[i] - &apos;0&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int toNumber_vec(vector&lt;int&gt; x, int radix) &#123;</span><br><span class="line">    int a = 0;</span><br><span class="line">    for (int i = 0; i &lt; x.size(); i++) &#123;</span><br><span class="line">        a = a * radix + x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string toString(int num,int radix)&#123;</span><br><span class="line">    string s = &quot;&quot;;</span><br><span class="line">    while(num!=0)&#123;</span><br><span class="line">        char a[10];</span><br><span class="line">        sprintf(a,&quot;%d&quot;,num % radix);</span><br><span class="line">        string str = a;</span><br><span class="line">        s += a;</span><br><span class="line">        num /= radix;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; toVector(int num,int radix)&#123;</span><br><span class="line">    vector&lt;int&gt; vec;</span><br><span class="line">    while(num!=0)&#123;</span><br><span class="line">        vec.push_back(num % radix);</span><br><span class="line">        num /= radix;</span><br><span class="line">    &#125;</span><br><span class="line">    return vec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    /*</span><br><span class="line">     * 字符串,int数组按进制转int</span><br><span class="line">     */</span><br><span class="line">    string s = &quot;12345&quot;;</span><br><span class="line">    vector&lt;int&gt; vec;</span><br><span class="line">    for(int i = 1;i &lt;= 5;i++)&#123;</span><br><span class="line">        vec.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; toNumber_str(s,10)&lt;&lt;endl;//12345</span><br><span class="line">    cout &lt;&lt; toNumber_vec(vec,10)&lt;&lt;endl;//12345</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * int按进制转字符串,int数组（逆向）</span><br><span class="line">     */</span><br><span class="line">    int a = 12345;</span><br><span class="line">    vector&lt;int&gt; v = toVector(a,10);//&quot;54321&quot;</span><br><span class="line">    string str = toString(a,10);//&quot;54321&quot;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * int转字符串（正向，仅支持10进制）</span><br><span class="line">     */</span><br><span class="line">    char b[10];</span><br><span class="line">    int size = sprintf(b,&quot;%d&quot;,a);</span><br><span class="line">    for(int i = 0;i &lt; size;i++) cout &lt;&lt; b[i];//&quot;12345&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PAT中常用的进制转化，包括string、vector和int间的按进制转换。string类型可以直接使用iostream读入:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&gt;&gt; str```&lt;/span&gt;&lt;/figca
      
    
    </summary>
    
      <category term="PAT" scheme="http://yoursite.com/categories/PAT/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>PAT1006-1014</title>
    <link href="http://yoursite.com/2020/06/21/PAT1006-1014/"/>
    <id>http://yoursite.com/2020/06/21/PAT1006-1014/</id>
    <published>2020-06-21T14:19:37.000Z</published>
    <updated>2020-06-22T04:02:36.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1006"><a href="#1006" class="headerlink" title="1006"></a>1006</h2><a id="more"></a><p><img src="/2020/06/21/PAT1006-1014/1.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="built_in">string</span> in;</span><br><span class="line">    <span class="built_in">string</span> out;</span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str1 = a.in;</span><br><span class="line">    <span class="built_in">string</span> str2 = b.in;</span><br><span class="line">    <span class="built_in">string</span> HH1 = str1.substr(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> MM1 = str1.substr(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> SS1 = str1.substr(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> HH2 = str2.substr(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> MM2 = str2.substr(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> SS2 = str2.substr(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (HH1 == HH2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (MM1 == MM2) &#123;</span><br><span class="line">            <span class="keyword">return</span> SS1 &lt; SS2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> MM1 &lt; MM2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> HH1 &lt; HH2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str1 = a.out;</span><br><span class="line">    <span class="built_in">string</span> str2 = b.out;</span><br><span class="line">    <span class="built_in">string</span> HH1 = str1.substr(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> MM1 = str1.substr(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> SS1 = str1.substr(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> HH2 = str2.substr(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> MM2 = str2.substr(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> SS2 = str2.substr(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (HH1 == HH2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (MM1 == MM2) &#123;</span><br><span class="line">            <span class="keyword">return</span> SS1 &gt; SS2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> MM1 &gt; MM2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> HH1 &gt; HH2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    Node node[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">string</span> a, b, c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        node[i].id = a;</span><br><span class="line">        node[i].in = b;</span><br><span class="line">        node[i].out = c;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node, node + n, cmp1);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; node[<span class="number">0</span>].id &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    sort(node, node + n, cmp2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; node[<span class="number">0</span>].id ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1007"><a href="#1007" class="headerlink" title="1007"></a>1007</h2><p><img src="/2020/06/21/PAT1006-1014/2.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 活用递推，先求S[i] = S[i-1] + a[i]</span></span><br><span class="line"><span class="comment">     * 从左至右找到最大的一个S，下标为index2</span></span><br><span class="line"><span class="comment">     * 从0至index2找到最小的一个S，下标为index1</span></span><br><span class="line"><span class="comment">     * 答案为a[index1+1]~a[index2]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> K;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        a.push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> MIN = <span class="number">100000000</span>;</span><br><span class="line">    <span class="keyword">int</span> MAX = <span class="number">-100000000</span>;</span><br><span class="line">    <span class="keyword">int</span> index1 = <span class="number">-1</span>, index2 = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    s.push_back(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; K; i++) &#123;</span><br><span class="line">        s.push_back(s[i - <span class="number">1</span>] + a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt; MAX) &#123;</span><br><span class="line">            MAX = s[i];</span><br><span class="line">            index2 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(MAX &lt; <span class="number">0</span>)&#123;<span class="comment">//如果最大的s还是负的或0，此时可能出现尽管S都负但a[n]中存在正数的情况，因此需要找到第二大的S 例如&#123;-1 -1 1 -3&#125;</span></span><br><span class="line">        MAX = <span class="number">-100000000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index2 + <span class="number">1</span>; i &lt; K; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt; MAX) &#123;</span><br><span class="line">                MAX = s[i];</span><br><span class="line">                index2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index2; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &lt; MIN) &#123;</span><br><span class="line">            MIN = s[i];</span><br><span class="line">            index1 = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    index1 += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isAllNeg = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; K;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            isAllNeg = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isAllNeg) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; a[K<span class="number">-1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index1; i &lt;= index2; i++) &#123;</span><br><span class="line">            sum = sum + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">" "</span> &lt;&lt; a[index1] &lt;&lt; <span class="string">" "</span> &lt;&lt; a[index2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1008"><a href="#1008" class="headerlink" title="1008"></a>1008</h2><p><img src="/2020/06/21/PAT1006-1014/3.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, total = <span class="number">0</span>, now = <span class="number">0</span>, to;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;to;</span><br><span class="line">        <span class="keyword">if</span> (to &gt; now)total += ((to - now) * <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">else</span> total += ((now - to) * <span class="number">4</span>);</span><br><span class="line">        total += <span class="number">5</span>;</span><br><span class="line">        now = to;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; total;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1009"><a href="#1009" class="headerlink" title="1009"></a>1009</h2><p><img src="/2020/06/21/PAT1006-1014/4.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Poly</span>&#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">exp</span>;</span><br><span class="line">    <span class="keyword">double</span> coef[<span class="number">2005</span>];</span><br><span class="line">    Poly()&#123;</span><br><span class="line">        fill(coef,coef+<span class="number">2005</span>,<span class="number">0.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Poly;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    Poly poly1,poly2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> p1;</span><br><span class="line">        <span class="keyword">double</span> p2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p1 &gt;&gt; p2;</span><br><span class="line">        poly1.<span class="built_in">exp</span>.push_back(p1);</span><br><span class="line">        poly1.coef[p1] = p2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> p1;</span><br><span class="line">        <span class="keyword">double</span> p2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p1 &gt;&gt; p2;</span><br><span class="line">        poly2.<span class="built_in">exp</span>.push_back(p1);</span><br><span class="line">        poly2.coef[p1] = p2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Poly poly3;</span><br><span class="line">    <span class="keyword">int</span> hasExp[<span class="number">2005</span>];</span><br><span class="line">    fill(hasExp,hasExp+<span class="number">2005</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; poly1.<span class="built_in">exp</span>.size();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; poly2.<span class="built_in">exp</span>.size();j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">exp</span> = poly1.<span class="built_in">exp</span>[i]+poly2.<span class="built_in">exp</span>[j];</span><br><span class="line">            <span class="keyword">double</span> coef = poly1.coef[poly1.<span class="built_in">exp</span>[i]]*poly2.coef[poly2.<span class="built_in">exp</span>[j]];</span><br><span class="line">            <span class="keyword">if</span>(hasExp[<span class="built_in">exp</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                poly3.<span class="built_in">exp</span>.push_back(<span class="built_in">exp</span>);</span><br><span class="line">                hasExp[<span class="built_in">exp</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            poly3.coef[<span class="built_in">exp</span>]+=coef;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2004</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hasExp[i] == <span class="number">1</span> &amp;&amp; poly3.coef[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt;<span class="string">"0"</span>;<span class="comment">//如果输出一项没有 注意0后面不要有空格</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2004</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hasExp[i] == <span class="number">1</span> &amp;&amp; poly3.coef[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            num++;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.1lf"</span>,poly3.coef[i]);</span><br><span class="line">            <span class="keyword">if</span>(num &lt; cnt) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;<span class="comment">//去尾空格</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1010"><a href="#1010" class="headerlink" title="1010"></a>1010</h2><p><img src="/2020/06/21/PAT1006-1014/5.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> tmp1[<span class="number">15</span>],str1[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">char</span> tmp2[<span class="number">15</span>],str2[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num1=<span class="number">0</span>,num2=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL radix;</span><br><span class="line">LL inf=(<span class="number">1L</span>L&lt;&lt;<span class="number">63</span>)<span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">convert</span><span class="params">(<span class="keyword">char</span> str[],LL radix,LL t)</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i]&gt;=<span class="string">'0'</span> &amp;&amp; str[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">num=num*radix+str[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]&gt;=<span class="string">'a'</span> &amp;&amp; str[i]&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">num=num*radix+(str[i]-<span class="string">'a'</span>+<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findLargest</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> MAX=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(str);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i]&gt;=<span class="string">'0'</span> &amp;&amp; str[i]&lt;=<span class="string">'9'</span>) MAX=max(MAX,str[i]-<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]&gt;=<span class="string">'a'</span> &amp;&amp; str[i]&lt;=<span class="string">'z'</span>)MAX=max(MAX,str[i]-<span class="string">'a'</span>+<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MAX+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s %d %d"</span>,tmp1,tmp2,&amp;flag,&amp;radix);</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(str1,tmp1);</span><br><span class="line"><span class="built_in">strcpy</span>(str2,tmp2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(str1,tmp2);</span><br><span class="line"><span class="built_in">strcpy</span>(str2,tmp1);</span><br><span class="line">&#125;</span><br><span class="line">num1=convert(str1,radix,inf);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l=<span class="number">0</span>,r=<span class="number">400</span>,mid;</span><br><span class="line">l=findLargest(str2);</span><br><span class="line">r=max(l,num1)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> f=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp=convert(str2,mid,inf);</span><br><span class="line"><span class="keyword">if</span>(tmp==<span class="number">-1</span>) r=mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tmp==num1)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,mid);</span><br><span class="line">f=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tmp&lt;num1) l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f==<span class="literal">false</span>) <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1011"><a href="#1011" class="headerlink" title="1011"></a>1011</h2><p><img src="/2020/06/21/PAT1006-1014/6.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">3</span>],b[<span class="number">3</span>],c[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">double</span> max;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">findMax</span><span class="params">(<span class="keyword">double</span> x[])</span></span>&#123;</span><br><span class="line">    Node node;</span><br><span class="line">    <span class="keyword">double</span> max = <span class="number">-1.0</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x[i]&gt;max)&#123;</span><br><span class="line">            max = x[i];</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node.index = index;</span><br><span class="line">    node.max = max;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[<span class="number">0</span>] &gt;&gt; a[<span class="number">1</span>] &gt;&gt; a[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; b[<span class="number">0</span>] &gt;&gt; b[<span class="number">1</span>] &gt;&gt; b[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; c[<span class="number">0</span>] &gt;&gt; c[<span class="number">1</span>] &gt;&gt; c[<span class="number">2</span>];</span><br><span class="line">    Node node1 = findMax(a);</span><br><span class="line">    Node node2 = findMax(b);</span><br><span class="line">    Node node3 = findMax(c);</span><br><span class="line">    <span class="keyword">char</span> mp[<span class="number">3</span>]=&#123;<span class="string">'W'</span>,<span class="string">'T'</span>,<span class="string">'L'</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mp[node1.index]&lt;&lt;<span class="string">" "</span>&lt;&lt;mp[node2.index]&lt;&lt;<span class="string">" "</span>&lt;&lt; mp[node3.index]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,(<span class="number">0.65</span>*node1.max*node2.max*node3.max<span class="number">-1</span>)*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1012"><a href="#1012" class="headerlink" title="1012"></a>1012</h2><p><img src="/2020/06/21/PAT1006-1014/7.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> C, M, E, A, rC, rM, rE, rA;</span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.C &gt; b.C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.M &gt; b.M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.E &gt; b.E;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp4</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.A &gt; b.A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    Node node[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; node[i].id &gt;&gt; node[i].C &gt;&gt; node[i].M &gt;&gt; node[i].E;</span><br><span class="line">        node[i].A = (node[i].C + node[i].M + node[i].E) / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node, node + N, cmp1);</span><br><span class="line">    node[<span class="number">0</span>].rC = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node[i].C == node[i<span class="number">-1</span>].C)&#123;</span><br><span class="line">            node[i].rC = node[i<span class="number">-1</span>].rC;</span><br><span class="line">            temp++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> node[i].rC = ++temp;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node, node + N, cmp2);</span><br><span class="line">    node[<span class="number">0</span>].rM = <span class="number">1</span>;</span><br><span class="line">    temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node[i].M == node[i<span class="number">-1</span>].M)&#123;</span><br><span class="line">            node[i].rM = node[i<span class="number">-1</span>].rM;</span><br><span class="line">            temp++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> node[i].rM = ++temp;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node, node + N, cmp3);</span><br><span class="line">    node[<span class="number">0</span>].rE = <span class="number">1</span>;</span><br><span class="line">    temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node[i].E == node[i<span class="number">-1</span>].E)&#123;</span><br><span class="line">            node[i].rE = node[i<span class="number">-1</span>].rE;</span><br><span class="line">            temp++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> node[i].rE = ++temp;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node, node + N, cmp4);</span><br><span class="line">    node[<span class="number">0</span>].rA = <span class="number">1</span>;</span><br><span class="line">    temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node[i].A == node[i<span class="number">-1</span>].A)&#123;</span><br><span class="line">            node[i].rA = node[i<span class="number">-1</span>].rA;</span><br><span class="line">            temp++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> node[i].rA = ++temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, Node&gt; mp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        mp[node[i].id] = node[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> input;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">        <span class="keyword">if</span> (mp.find(input) == mp.end()) <span class="built_in">cout</span> &lt;&lt; <span class="string">"N/A"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node t = mp[input];</span><br><span class="line">            <span class="keyword">int</span> rank = <span class="number">100000</span>;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">int</span> acme[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">char</span> hashMap[<span class="number">4</span>];</span><br><span class="line">            acme[<span class="number">0</span>] = t.rA;</span><br><span class="line">            hashMap[<span class="number">0</span>] = <span class="string">'A'</span>;</span><br><span class="line">            acme[<span class="number">1</span>] = t.rC;</span><br><span class="line">            hashMap[<span class="number">1</span>] = <span class="string">'C'</span>;</span><br><span class="line">            acme[<span class="number">2</span>] = t.rM;</span><br><span class="line">            hashMap[<span class="number">2</span>] = <span class="string">'M'</span>;</span><br><span class="line">            acme[<span class="number">3</span>] = t.rE;</span><br><span class="line">            hashMap[<span class="number">3</span>] = <span class="string">'E'</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (acme[j] &lt; rank) &#123;</span><br><span class="line">                    rank = acme[j];</span><br><span class="line">                    index = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; rank &lt;&lt; <span class="string">" "</span> &lt;&lt; hashMap[index] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1013"><a href="#1013" class="headerlink" title="1013"></a>1013</h2><p><img src="/2020/06/21/PAT1006-1014/8.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">bool</span> isVisit[<span class="number">1010</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> s,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a[])</span> </span>&#123;</span><br><span class="line">    isVisit[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[s].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isVisit[a[s][i]])</span><br><span class="line">            DFS(a[s][i],a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M, K;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        Adj[a].push_back(b);</span><br><span class="line">        Adj[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj_copy[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; N + <span class="number">1</span>; m++) &#123;</span><br><span class="line">            Adj_copy[m] = Adj[m];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        Adj_copy[t].clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it = Adj_copy[j].begin(); it &lt; Adj_copy[j].end(); it++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (*it == t) Adj_copy[j].erase(it);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        fill(isVisit, isVisit + <span class="number">1010</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; N + <span class="number">1</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isVisit[k]) &#123;</span><br><span class="line">                DFS(k,Adj_copy);</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num - <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1014"><a href="#1014" class="headerlink" title="1014"></a>1014</h2><p><img src="/2020/06/21/PAT1006-1014/9.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> time1;</span><br><span class="line">    <span class="keyword">int</span> time2;</span><br><span class="line">&#125;node[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Time</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> HH;</span><br><span class="line">    <span class="keyword">int</span> MM;</span><br><span class="line">&#125;Time;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &gt; queues;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; vec_queues;</span><br><span class="line"><span class="keyword">int</span> time_consume[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Time <span class="title">SS2HHMM</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;<span class="comment">//秒数转为HH:MM</span></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">8</span> + s / <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">int</span> m = s - (s / <span class="number">60</span>) * <span class="number">60</span>;</span><br><span class="line">    Time time;</span><br><span class="line">    time.HH = h;</span><br><span class="line">    time.MM = m;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M,K,Q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K &gt;&gt; Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        queues.push_back(q);</span><br><span class="line">        vec_queues.push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; K+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; time_consume[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; M;s++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; queues.size();i++)&#123;</span><br><span class="line">            queues[i].push(index);</span><br><span class="line">            vec_queues[i].push_back(index);</span><br><span class="line">            <span class="keyword">int</span> vec_size = vec_queues[i].size();</span><br><span class="line">            node[index].time1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(index == queues[i].front())&#123;</span><br><span class="line">                node[index].time2 = time_consume[index];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node[index].time2 = node[vec_queues[i][vec_size - <span class="number">2</span>]].time2 + time_consume[index];</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> isFinished = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//    for(int i = 0;i &lt; queues.size();i++)&#123;</span></span><br><span class="line"><span class="comment">//        if(!queues[i].empty()) isFinished = false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">while</span>(index &lt;= K)&#123;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; queues.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node[queues[i].front()].time2 &lt; min)&#123;</span><br><span class="line">                min = node[queues[i].front()].time2;</span><br><span class="line">                t = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> front = queues[t].front();</span><br><span class="line">        queues[t].pop();</span><br><span class="line">        queues[t].push(index);</span><br><span class="line">        node[index].time1 = node[front].time2;</span><br><span class="line">        vec_queues[t].push_back(index);</span><br><span class="line">        <span class="keyword">int</span> vec_size = vec_queues[t].size();</span><br><span class="line">        node[index].time2 = node[vec_queues[t][vec_size - <span class="number">2</span>]].time2 + time_consume[index];</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; Q;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">        <span class="keyword">int</span> start_time = node[q].time1;</span><br><span class="line">        <span class="keyword">int</span> finish_time = node[q].time2;</span><br><span class="line">        <span class="keyword">if</span>((finish_time - time_consume[q]) &gt;= <span class="number">540</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Sorry"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02d:%02d\n"</span>,SS2HHMM(finish_time).HH,SS2HHMM(finish_time).MM);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1006&quot;&gt;&lt;a href=&quot;#1006&quot; class=&quot;headerlink&quot; title=&quot;1006&quot;&gt;&lt;/a&gt;1006&lt;/h2&gt;
    
    </summary>
    
      <category term="PAT" scheme="http://yoursite.com/categories/PAT/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Djikstra题型总结</title>
    <link href="http://yoursite.com/2020/06/14/Djikstra%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/06/14/Djikstra题型总结/</id>
    <published>2020-06-14T12:20:48.000Z</published>
    <updated>2020-06-14T15:09:54.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>使用Dijkstra的最短路的问题通常不仅要求给出最短路径，还附带以下几种题型或其组合：</p><ul><li>额外增加一个边权，用于最短路径相同情况下的比较；</li><li>额外增加一个点权，用于最短路径相同情况下的比较；</li><li>问有多少种最短路；</li><li>输出最短路经过节点。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">510</span>; <span class="comment">//最大顶点数，通常取题目所给条件的上限+（5～10）即可</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100000000</span>;<span class="comment">//定义一个很大的数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[MAXV];<span class="comment">//图的邻接表（可以选择用vector&lt;Node&gt; Adj[] 结构体中放入边权和点权）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[MAXV];<span class="comment">//第一线权（从起点s到顶点u的最短路程为d[u]）</span></span><br><span class="line"><span class="keyword">int</span> w[MAXV];<span class="comment">//点权（从起点s到顶点u能收集到的最多的点权为w[u]）</span></span><br><span class="line"><span class="keyword">int</span> c[MAXV];<span class="comment">//第二线权（从起点s到顶点u花费的最少线权为c[u]）</span></span><br><span class="line"><span class="keyword">int</span> num[MAXV];<span class="comment">//记录相同距离路径个数</span></span><br><span class="line"><span class="keyword">int</span> pre[MAXV];<span class="comment">//从起点到v的最短路径的v的前一个节点为pre[v]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> weight[MAXV];<span class="comment">//存储输入的点权</span></span><br><span class="line"><span class="keyword">int</span> dist[MAXV][MAXV];<span class="comment">//存储输入的第一线权</span></span><br><span class="line"><span class="keyword">int</span> cost[MAXV][MAXV];<span class="comment">//存储输入的第二线权</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isVisit[MAXV];<span class="comment">//用来记录是否访问过</span></span><br><span class="line"><span class="keyword">int</span> M,N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_route</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 输入的格式</span></span><br><span class="line"><span class="comment">     * N（节点个数） M（边个数）</span></span><br><span class="line"><span class="comment">     * w1 w2 ... wN （点权）</span></span><br><span class="line"><span class="comment">     * v1 v2 distance cost (两顶点编号，以及两者间的两种边权)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        weight[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> v1,v2,distance,cost_;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; distance &gt;&gt; cost_;</span><br><span class="line">        dist[v1][v2] = distance;</span><br><span class="line">        cost[v1][v2] = cost_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化全局变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    fill(d,d+MAXV,INF);<span class="comment">//初始d都为0</span></span><br><span class="line">    fill(w,w+MAXV,<span class="number">0</span>);</span><br><span class="line">    fill(c,c+MAXV,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    fill(num,num+MAXV,<span class="number">0</span>);</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Dijkstra(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;<span class="comment">//s为起点</span></span><br><span class="line">    d[s] = <span class="number">0</span>;<span class="comment">//起点到自己距离为0</span></span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">-1</span>;<span class="comment">//用来记录当前的顶点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;<span class="comment">//计算到每个点的最短路径</span></span><br><span class="line">        <span class="keyword">int</span> MIN = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isVisit[j]== <span class="literal">false</span> &amp;&amp; d[j] &lt; MIN)&#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        isVisit[u] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; Adj[u].size();j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = Adj[u][j];</span><br><span class="line">            <span class="keyword">if</span>(isVisit[v] == <span class="literal">false</span> &amp;&amp; d[u] + dist[u][v] &lt; d[v])&#123;<span class="comment">//优先级：第一线 &gt; 第二线 &gt; 点</span></span><br><span class="line">                d[v] = d[u] + dist[u][v];<span class="comment">//第一线权</span></span><br><span class="line">                c[v] = c[u] + cost[u][v];<span class="comment">//第二线权</span></span><br><span class="line">                w[v] = w[u] + weight[v];<span class="comment">//点权</span></span><br><span class="line">                num[v] = num[u];</span><br><span class="line">                pre[v] = u;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isVisit[v] == <span class="literal">false</span> &amp;&amp; d[u] + dist[u][v] == d[v])&#123;</span><br><span class="line">                num[v] = num[v] + num[u];<span class="comment">//加法原理</span></span><br><span class="line">                <span class="keyword">if</span>(c[v] &gt; c[u] + cost[u][v])&#123;</span><br><span class="line">                    c[v] = c[u] + cost[u][v];<span class="comment">//选择更小的花费</span></span><br><span class="line">                    pre[v] = u;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c[v] == c[u] + cost[u][v])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(w[v] &lt; w[u] + weight[v])&#123;</span><br><span class="line">                        w[v] = w[u] + weight[v];</span><br><span class="line">                        pre[v] = u;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print_route(s, i);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_route</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> v)</span></span>&#123;<span class="comment">//类似于并查集或DFS</span></span><br><span class="line">    <span class="keyword">if</span>(v==s)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    print_route(s,pre[v]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;使用Dijkstra的最短路的问题通常不仅要求给出最短路径，还附带以下几种题型或其组合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;额外增加一个边权，用于最
      
    
    </summary>
    
      <category term="PAT" scheme="http://yoursite.com/categories/PAT/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>PAT1005</title>
    <link href="http://yoursite.com/2020/06/14/PAT1005/"/>
    <id>http://yoursite.com/2020/06/14/PAT1005/</id>
    <published>2020-06-14T10:39:36.000Z</published>
    <updated>2020-06-14T11:00:36.541Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="/2020/06/14/PAT1005/5.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> input;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; input;<span class="comment">//cin直接传给string类型，注意这是STL里的string，不是cstring</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; input.size(); i++)&#123;</span><br><span class="line">        sum += input[i] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> hash[<span class="number">10</span>];</span><br><span class="line">    hash[<span class="number">0</span>] = <span class="string">"zero"</span>;</span><br><span class="line">    hash[<span class="number">1</span>] = <span class="string">"one"</span>;</span><br><span class="line">    hash[<span class="number">2</span>] = <span class="string">"two"</span>;</span><br><span class="line">    hash[<span class="number">3</span>] = <span class="string">"three"</span>;</span><br><span class="line">    hash[<span class="number">4</span>] = <span class="string">"four"</span>;</span><br><span class="line">    hash[<span class="number">5</span>] = <span class="string">"five"</span>;</span><br><span class="line">    hash[<span class="number">6</span>] = <span class="string">"six"</span>;</span><br><span class="line">    hash[<span class="number">7</span>] = <span class="string">"seven"</span>;</span><br><span class="line">    hash[<span class="number">8</span>] = <span class="string">"eight"</span>;</span><br><span class="line">    hash[<span class="number">9</span>] = <span class="string">"nine"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> output[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> num = <span class="built_in">sprintf</span>(output,<span class="string">"%d"</span>,sum);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    sprintf函数，可以手写，类似于进制转换，将int型转换为数字字符串，返回值为转换成的字符串的大小（不包括结尾\0）</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; hash[output[i] - <span class="string">'0'</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt; hash[output[i] - <span class="string">'0'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/14/PAT1005/5.png&quot; alt&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="PAT" scheme="http://yoursite.com/categories/PAT/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>PAT1004</title>
    <link href="http://yoursite.com/2020/06/14/PAT1004/"/>
    <id>http://yoursite.com/2020/06/14/PAT1004/</id>
    <published>2020-06-14T10:37:51.000Z</published>
    <updated>2020-06-21T14:27:27.484Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="/2020/06/14/PAT1004/4.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Node[N];</span><br><span class="line"><span class="keyword">int</span> level[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> leaf[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> max_level = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> front = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        max_level = max(max_level,level[front]);</span><br><span class="line">        <span class="keyword">if</span>(Node[front].size() == <span class="number">0</span>)&#123;</span><br><span class="line">            leaf[level[front]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Node[front].size(); i++)&#123;</span><br><span class="line">            level[Node[front][i]] = level[front] + <span class="number">1</span>;</span><br><span class="line">            Q.push(Node[front][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> parent, k, child;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; parent &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j &lt; k;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; child;</span><br><span class="line">            Node[parent].push_back(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BFS();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= max_level; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; leaf[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; leaf[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/14/PAT1004/4.png&quot; alt&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="PAT" scheme="http://yoursite.com/categories/PAT/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>PAT1003</title>
    <link href="http://yoursite.com/2020/06/14/PAT1003/"/>
    <id>http://yoursite.com/2020/06/14/PAT1003/</id>
    <published>2020-06-14T10:36:44.000Z</published>
    <updated>2020-06-21T14:27:35.363Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="/2020/06/14/PAT1003/3.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span> N,M,C1,C2;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; Adj[<span class="number">510</span>];</span><br><span class="line"><span class="keyword">int</span> dot_weight[<span class="number">510</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">510</span>];</span><br><span class="line"><span class="keyword">int</span> W[<span class="number">510</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">510</span>];</span><br><span class="line"><span class="keyword">bool</span> isVisit[<span class="number">510</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fill(d,d+<span class="number">510</span>,INF);<span class="comment">//两种不同方法效果一样</span></span><br><span class="line">    <span class="comment">//memset(d,INF,sizeof(d));</span></span><br><span class="line">    fill(W,W+<span class="number">510</span>,<span class="number">0</span>);</span><br><span class="line">    fill(cnt,cnt+<span class="number">510</span>,<span class="number">1</span>);</span><br><span class="line">    fill(dot_weight,dot_weight+<span class="number">510</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; C1 &gt;&gt; C2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; N ;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; dot_weight[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; M;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        Node node1, node2;</span><br><span class="line">        node1.v = a;</span><br><span class="line">        node2.v = b;</span><br><span class="line">        node1.dist = node2.dist = c;</span><br><span class="line">        Adj[a].push_back(node2);</span><br><span class="line">        Adj[b].push_back(node1);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(C1);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt[C2] &lt;&lt;<span class="string">" "</span>&lt;&lt; W[C2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">510</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==s)&#123;</span><br><span class="line">            cnt[i] = <span class="number">1</span>;</span><br><span class="line">            W[i] = dot_weight[s];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> MIN = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isVisit[j]==<span class="literal">false</span> &amp;&amp; d[j] &lt; MIN)&#123;</span><br><span class="line">                u = j;</span><br><span class="line">                MIN = d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        isVisit[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Adj[u].size(); j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = Adj[u][j].v;</span><br><span class="line">            <span class="keyword">if</span>(isVisit[v]==<span class="literal">false</span> &amp;&amp; d[u]+ Adj[u][j].dist &lt; d[v])&#123;</span><br><span class="line">                d[v] = d[u]+ Adj[u][j].dist;</span><br><span class="line">                cnt[v] = cnt[u];</span><br><span class="line">                W[v] = W[u] + dot_weight[v];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isVisit[v]==<span class="literal">false</span> &amp;&amp; d[u]+ Adj[u][j].dist == d[v])&#123;</span><br><span class="line">                cnt[v] = cnt[u] + cnt[v];</span><br><span class="line">                <span class="keyword">if</span>(W[v] &lt; W[u] + dot_weight[v])&#123;</span><br><span class="line">                    W[v] = W[u] + dot_weight[v];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/14/PAT1003/3.png&quot; alt&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="PAT" scheme="http://yoursite.com/categories/PAT/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>PAT1002</title>
    <link href="http://yoursite.com/2020/06/14/PAT1002/"/>
    <id>http://yoursite.com/2020/06/14/PAT1002/</id>
    <published>2020-06-14T10:33:22.000Z</published>
    <updated>2020-06-21T14:27:38.965Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="/2020/06/14/PAT1002/2.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Poly</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  K;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span>[<span class="number">1005</span>];</span><br><span class="line">    <span class="keyword">double</span> coef[<span class="number">1005</span>];</span><br><span class="line">&#125;Poly;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Poly p1,p2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1005</span>;i++)&#123;</span><br><span class="line">        p1.<span class="built_in">exp</span>[i] = <span class="number">0</span>;</span><br><span class="line">        p2.<span class="built_in">exp</span>[i] = <span class="number">0</span>;</span><br><span class="line">        p1.coef[i] = <span class="number">0</span>;</span><br><span class="line">        p1.coef[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p1.K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; p1.K;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        p1.<span class="built_in">exp</span>[temp] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p1.coef[temp];      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p2.K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; p2.K;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        p2.<span class="built_in">exp</span>[temp] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p2.coef[temp];      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Poly p3;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1005</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p1.<span class="built_in">exp</span>[i]==<span class="number">1</span>||p2.<span class="built_in">exp</span>[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            num++;</span><br><span class="line">            p3.<span class="built_in">exp</span>[i] = <span class="number">1</span>;</span><br><span class="line">            p3.coef[i] = p1.coef[i] + p2.coef[i];</span><br><span class="line">            <span class="keyword">if</span>(p3.coef[i]==<span class="number">0</span>)&#123;<span class="comment">//多项式相加系数为0的情况</span></span><br><span class="line">                p3.<span class="built_in">exp</span>[i] = <span class="number">0</span>;</span><br><span class="line">                num--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt;<span class="string">"0"</span>;<span class="comment">//如果输出一项没有 注意0后面不要有空格</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1004</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p3.<span class="built_in">exp</span>[i] == <span class="number">1</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.1lf"</span>,p3.coef[i]);</span><br><span class="line">            <span class="keyword">if</span>(cnt &lt; num) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;<span class="comment">//去尾空格</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/14/PAT1002/2.png&quot; alt&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="PAT" scheme="http://yoursite.com/categories/PAT/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>PAT1001</title>
    <link href="http://yoursite.com/2020/06/14/PAT1001/"/>
    <id>http://yoursite.com/2020/06/14/PAT1001/</id>
    <published>2020-06-14T10:27:10.000Z</published>
    <updated>2020-06-14T11:00:33.835Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="/2020/06/14/PAT1001/1.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">int</span> c = a + b;</span><br><span class="line">    <span class="keyword">if</span>(c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-"</span>;</span><br><span class="line">        c = -c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">int</span> digit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = c;</span><br><span class="line">    <span class="keyword">while</span>(temp&gt;=<span class="number">1000</span>)&#123;<span class="comment">//计算能除多少个1000</span></span><br><span class="line">        temp = temp/<span class="number">1000</span>;</span><br><span class="line">        digit += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(digit &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = c/<span class="built_in">pow</span>(<span class="number">1000</span>,digit);</span><br><span class="line">        vec.push_back(t);<span class="comment">//商入数组</span></span><br><span class="line">        c = c - t * <span class="built_in">pow</span>(<span class="number">1000</span>,digit);<span class="comment">//余数代替</span></span><br><span class="line">        digit--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; vec.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i !=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%03d"</span>,vec[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; vec[i];</span><br><span class="line">        <span class="keyword">if</span>(i != vec.size()<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">","</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/14/PAT1001/1.png&quot; alt&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="PAT" scheme="http://yoursite.com/categories/PAT/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Shockhosting——一个小众的VPS运营商</title>
    <link href="http://yoursite.com/2019/09/22/Shockhosting%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E5%B0%8F%E4%BC%97%E7%9A%84VPS%E8%BF%90%E8%90%A5%E5%95%86/"/>
    <id>http://yoursite.com/2019/09/22/Shockhosting——一个小众的VPS运营商/</id>
    <published>2019-09-22T08:12:45.000Z</published>
    <updated>2019-09-22T11:43:25.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><p><a href="www.shockhosting.net">Shockhosting官网</a><br>不用挂梯子就可以进，但注册的时候如果不挂似乎刷不出验证码，临时有需要可以联系我啦（：<br>购买后页面<br><img src="/2019/09/22/Shockhosting——一个小众的VPS运营商/2.png" alt><br><a id="more"></a></p><h2 id="优惠码"><a href="#优惠码" class="headerlink" title="优惠码"></a>优惠码</h2><p>更新时间：2019.9.22</p><p><font color="red">LET30</font> 七折优惠码</p><h2 id="下载ssr服务器端时报错"><a href="#下载ssr服务器端时报错" class="headerlink" title="下载ssr服务器端时报错"></a>下载ssr服务器端时报错</h2><p>wget下载ssr安装时，报根目录容量不够，检查了一下硬盘容量，发现文件系统中 <code>/</code>下只有2个g，可我购买的服务器硬盘有50个g呀。<br>检查了一下磁盘空间确实是20个g，只不过文件系统只占用了22g，剩余的磁盘都空闲。<br>使用以下命令扩大文件系统空间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resize2fs [空闲磁盘名称]</span><br></pre></td></tr></table></figure></p><p><img src="/2019/09/22/Shockhosting——一个小众的VPS运营商/1.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网址&quot;&gt;&lt;a href=&quot;#网址&quot; class=&quot;headerlink&quot; title=&quot;网址&quot;&gt;&lt;/a&gt;网址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;www.shockhosting.net&quot;&gt;Shockhosting官网&lt;/a&gt;&lt;br&gt;不用挂梯子就可以进，但注册的时候如果不挂似乎刷不出验证码，临时有需要可以联系我啦（：&lt;br&gt;购买后页面&lt;br&gt;&lt;img src=&quot;/2019/09/22/Shockhosting——一个小众的VPS运营商/2.png&quot; alt&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yoursite.com/categories/VPS/"/>
    
    
      <category term="Linux Shell" scheme="http://yoursite.com/tags/Linux-Shell/"/>
    
      <category term="ssr" scheme="http://yoursite.com/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>mac下书写JavaWeb最正确的方式——IDEA+Maven+SSM框架</title>
    <link href="http://yoursite.com/2019/09/20/mac%E4%B8%8B%E4%B9%A6%E5%86%99JavaWeb%E6%9C%80%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%96%B9%E5%BC%8F%E2%80%94%E2%80%94IDEA-Maven-SSM%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/09/20/mac下书写JavaWeb最正确的方式——IDEA-Maven-SSM框架/</id>
    <published>2019-09-20T13:05:50.000Z</published>
    <updated>2019-09-20T13:05:50.843Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GPU版tensorflow环境配置</title>
    <link href="http://yoursite.com/2019/09/17/GPU%E7%89%88tensorflow%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/09/17/GPU版tensorflow环境配置/</id>
    <published>2019-09-17T15:27:18.000Z</published>
    <updated>2019-09-22T11:41:58.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本匹配问题"><a href="#版本匹配问题" class="headerlink" title="版本匹配问题"></a>版本匹配问题</h2><table><thead><tr><th style="text-align:center">软件</th><th style="text-align:center">版本</th></tr></thead><tbody><tr><td style="text-align:center">tensorflow-gpu</td><td style="text-align:center">1.14.0</td></tr><tr><td style="text-align:center">cuda</td><td style="text-align:center">10.0</td></tr><tr><td style="text-align:center">cuDNN</td><td style="text-align:center">7.4</td></tr><tr><td style="text-align:center">显卡驱动</td><td style="text-align:center">418.74</td></tr><tr><td style="text-align:center">OS</td><td style="text-align:center">Ubuntu 18.04</td></tr><tr><td style="text-align:center">Python</td><td style="text-align:center">python 3.6</td></tr></tbody></table><p>亲测，按照这版本，显卡风扇已经呼啦啦的转起来了。<br><a id="more"></a></p><h2 id="一些可能遇到的问题"><a href="#一些可能遇到的问题" class="headerlink" title="一些可能遇到的问题"></a>一些可能遇到的问题</h2><p><strong>写在最前面:</strong></p><ul><li><strong>碰到报错首先读log，根据原因找解决方案</strong></li><li><strong>多利用搜索引擎</strong></li><li><strong>安装顺序：操作系统-python-显卡驱动-cuda-cuDNN-tensorflow</strong></li></ul><h3 id="GCC编译器版本可能引起的问题"><a href="#GCC编译器版本可能引起的问题" class="headerlink" title="GCC编译器版本可能引起的问题"></a>GCC编译器版本可能引起的问题</h3><p>这里要注意的是，使用tensorflow进行training的时候GCC版本要为4.8，而在安装显卡驱动的时候，GCC版本要7.0以上，所以要注意GCC降级的时间。</p><h3 id="cuda、cuDNN下载速度"><a href="#cuda、cuDNN下载速度" class="headerlink" title="cuda、cuDNN下载速度"></a>cuda、cuDNN下载速度</h3><p>个人感觉Ubuntu网卡驱动没有自己的笔记本上的好，导致速度很慢，所以我选择在macOS里下载好安装包再通过u盘或者内网ftp协议传输过去；另外浏览器下载慢可以尝试复制链接迅雷下载。</p><h3 id="cuda安装过程"><a href="#cuda安装过程" class="headerlink" title="cuda安装过程"></a>cuda安装过程</h3><p>建议不勾选安装显卡驱动，而是自己手动安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版本匹配问题&quot;&gt;&lt;a href=&quot;#版本匹配问题&quot; class=&quot;headerlink&quot; title=&quot;版本匹配问题&quot;&gt;&lt;/a&gt;版本匹配问题&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;软件&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;tensorflow-gpu&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1.14.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cuda&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cuDNN&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;显卡驱动&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;418.74&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;OS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ubuntu 18.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Python&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;python 3.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;亲测，按照这版本，显卡风扇已经呼啦啦的转起来了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>连续整数的最小交换排序问题</title>
    <link href="http://yoursite.com/2019/07/15/%E8%BF%9E%E7%BB%AD%E6%95%B4%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/15/连续整数的最小交换排序问题/</id>
    <published>2019-07-14T16:26:08.000Z</published>
    <updated>2019-07-14T17:09:48.625Z</updated>
    
    <content type="html"><![CDATA[<p>NJU的CS上机指定使用C++，最近抱起《C++Primer》开始肯，同时找到了一个不错的OJ平台——hackerrank，这题是里面碰到的第一个有点困难的题。</p><p><a href="https://www.hackerrank.com/challenges/minimum-swaps-2/problem" target="_blank" rel="noopener">原题链接</a><br><a id="more"></a><br>对于输入的一个数组，这个数组纬度为n，且仅含整数 1～$n$ 各一次,例如$$arr = [5,4,3,2,1]$$<br>要求仅使用多次swap方法调换位置，使得该数组递增，即$$arr = [1,2,3,4,5]$$<br>最终要求输出最小的swap次数。</p><p>最开始的想法是这样的：<br>                   $[5,4,3,2,1]$<br>1st: swap(0,4) –&gt; $[1,4,3,2,5]$<br>2nd: swap(1,3) –&gt; $[1,2,3,4,5]$</p><p>即每次从索引为0的地方查起，若发现索引$i$对应的值不是$i+1$，就将该数字与它应在的正确位置想交换；然后开始新一轮的从搜索(从索引0开始)，直到整个数组递增。用c++写出来：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isCorrect</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minimumSwaps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        a.push_back(temp);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; minimumSwaps(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minimumSwaps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (isCorrect(arr) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pos;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (arr[i] != i + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pos = i;</span><br><span class="line">                val = arr[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        temp = val;</span><br><span class="line">        arr[pos] = arr[val - <span class="number">1</span>];</span><br><span class="line">        arr[val - <span class="number">1</span>] = temp;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isCorrect</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flg = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] != i + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flg = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>信心慢慢提交，发现超时，检查了一下oj的输入数据，超时错误从数据量达到50000开始出现，然后想到是时间复杂度太高的问题，优化过后的代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; solve(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> i);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minimumSwaps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        a.push_back(temp);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; minimumSwaps(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minimumSwaps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; arr.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] != i + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            arr = solve(arr, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; arr.size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] != j + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = j;</span><br><span class="line">            <span class="keyword">if</span>(i != arr.size())</span><br><span class="line">            arr = solve(arr, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; solve(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = i;</span><br><span class="line">    <span class="keyword">int</span> val = arr[i];</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = val;</span><br><span class="line">    arr[pos] = arr[val - <span class="number">1</span>];</span><br><span class="line">    arr[val - <span class="number">1</span>] = temp;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Submit</p><p><font color="green">Accepted</font><br>呼～嘿嘿</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NJU的CS上机指定使用C++，最近抱起《C++Primer》开始肯，同时找到了一个不错的OJ平台——hackerrank，这题是里面碰到的第一个有点困难的题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/minimum-swaps-2/problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
</feed>
